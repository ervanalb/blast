name: blast-base

networks:
  internal:
    external: false

volumes:
  blast-db: {}
  django-static: {}
  blast-data:
    name: "blast-data"

services:
  app:
    image: ${BLAST_IMAGE:-registry.gitlab.com/ncsa-blast/kubernetes/blast:latest}
    command: bash entrypoints/docker-entrypoint.app.sh
    networks:
      internal:
        aliases:
          - ${WEB_APP_HOST}
    env_file:
      - ../env/.env.default
      - ../env/.env.dev
    volumes:
      - blast-data:/mnt/data
      - django-static:/app/static
      - ./dustmapsrc:/tmp/.dustmapsrc:ro
    profiles:
      - "full_prod"
      - "slim_prod"
      - "full_dev"
      - "slim_dev"
      - "ci"
      - "batch"

  database:
    image: mariadb:10
    platform: linux/x86_64
    restart: always
    volumes:
      - blast-db:/var/lib/mysql/
    networks:
      internal:
        aliases:
          - ${DATABASE_HOST}
    env_file:
      - ../env/.env.default
      - ../env/.env.dev
    profiles:
      - "full_prod"
      - "slim_prod"
      - "full_dev"
      - "slim_dev"
      - "ci"
      - "batch"

  celery-worker:
    image: ${BLAST_IMAGE:-registry.gitlab.com/ncsa-blast/kubernetes/blast:latest}
    command: bash entrypoints/docker-entrypoint.celery.sh
    networks:
      - internal
    env_file:
      - ../env/.env.default
      - ../env/.env.dev
    deploy:
      mode: replicated
      replicas: 2
      resources:
        reservations:
          cpus: '0.25'
          memory: 1G
        limits:
          cpus: "${CELERY_WORKER_LIMIT_CPUS:-4.0}"
          memory: ${CELERY_WORKER_LIMIT_MEMORY:-4G}
    volumes:
      - blast-data:/mnt/data
      - django-static:/app/static
      - ./dustmapsrc:/tmp/.dustmapsrc:ro
    profiles:
      - "full_prod"
      - "full_dev"
      - "batch"

  celery-beat:
    image: ${BLAST_IMAGE:-registry.gitlab.com/ncsa-blast/kubernetes/blast:latest}
    command: bash entrypoints/docker-entrypoint.celery_beat.sh
    networks:
      - internal
    env_file:
      - ../env/.env.default
      - ../env/.env.dev
    volumes:
      - blast-data:/mnt/data
      - django-static:/app/static
      - ./dustmapsrc:/tmp/.dustmapsrc:ro
    profiles:
      - "full_prod"
      - "full_dev"
      - "batch"

  rabbitmq:
    image: rabbitmq:3.10.6-management-alpine
    restart: always
    networks:
      - internal
    # ports:
    #   - 127.0.0.1:5672:${MESSAGE_BROKER_PORT}
    #   - 127.0.0.1:15672:${MESSAGE_BROKER_MANAGEMENT_PORT}
    env_file:
      - ../env/.env.default
      - ../env/.env.dev
    volumes:
      - ../data/rabbitmq_data:/data
      - ../data/rabbitmq_data/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    profiles:
      - "full_prod"
      - "full_dev"
      - "batch"

  nginx:
    image: nginx:1.21-alpine
    restart: always
    networks:
      - internal
    ports:
      - 127.0.0.1:80:${WEB_SERVER_PORT}
    env_file:
      - ../env/.env.default
      - ../env/.env.dev
    volumes:
      - django-static:/static
      - blast-data:/data
      - ../nginx/default.conf:/etc/nginx/conf.d/default.conf
    profiles:
      - "full_prod"

  flower:
    image: ${BLAST_IMAGE:-registry.gitlab.com/ncsa-blast/kubernetes/blast:latest}
    command: bash entrypoints/docker-entrypoint.flower.sh
    networks:
      - internal
    ports:
      - 127.0.0.1:8888:${FLOWER_PORT}
    env_file:
      - ../env/.env.default
      - ../env/.env.dev
    profiles:
      - "full_prod"
      - "full_dev"
      - "batch"

  batch:
    image: python:3.9-buster
    command: bash docker-entrypoint.batch.sh
    network_mode: "host"
    env_file:
      - ../env/.env.default
      - ../env/.env.dev
    volumes:
      - ../batch/run_batch.py:/run_batch.py
      - ../app/entrypoints/wait-for-it.sh:/wait-for-it.sh
      - ../batch/docker-entrypoint.batch.sh:/docker-entrypoint.batch.sh
      - ${BATCH_CSV}:/input.csv
      - ${OUTPUT_CSV}:/results.csv
    profiles:
      - "batch"
